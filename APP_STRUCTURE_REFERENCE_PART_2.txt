# App Folder Structure and File Descriptions (Part 2)

This document continues the comprehensive overview of every file and folder in the `resources` directory and beyond. It is intended as a reference for maintainers and developers making architectural changes, ensuring clarity on file purposes, key editing considerations, and inter-file relationships.

---

## routes/
- **api.php**: Defines API routes for the application. These routes are typically stateless and use the `api` middleware group. Used for endpoints consumed by frontend JavaScript or external clients.
- **auth.php**: Contains authentication-related routes (login, registration, password reset, etc.). Often loaded by Laravel Breeze, Jetstream, or Fortify.
- **channels.php**: Defines event broadcasting channels for Laravel Echo and real-time features. Used to authorize private and presence channels.
- **console.php**: Registers Artisan console commands and their closures. Used for custom CLI commands that don't require a dedicated class.
- **web.php**: Main file for web routes. Defines all browser-accessible routes, uses the `web` middleware group, and handles most of the application's page routing and controller actions.

## resources/
- **css/**: Contains source CSS files for the application's frontend. These are typically authored by developers and compiled into public assets.
- **js/**: Contains source JavaScript files for the application's frontend. These are typically authored by developers and compiled into public assets.
- **views/**: Contains all Blade templates for the application's UI. Organized by feature (e.g., orders, layouts, livewire components). Each subfolder and file is described in detail below as we progress.

## resources/css/
- **app.css**: Main source CSS file for the application. Written by developers and compiled (via Vite or Laravel Mix) into public assets. Edit this file to add or modify global styles.

## resources/js/
- **app.js**: Main source JavaScript file for the application. Written by developers and compiled into public assets. Entry point for custom JS logic.
- **bootstrap.js**: Initializes JavaScript dependencies (such as Bootstrap, Popper, or other libraries). Imported by app.js.
- **css/**: (Subfolder) May contain JavaScript-managed CSS or style-related JS modules. List and describe its contents as you progress.

## resources/views/
- **all-orders.blade.php**: Blade template for the admin's all-orders view, including pending table requests and order management.
- **dashboard.blade.php**: Main dashboard view for users after login.
- **welcome.blade.php**: Default Laravel welcome page; may be customized or replaced.
- **auth/**: Contains authentication-related views (login, registration, password reset, etc.).
- **components/**: Contains reusable Blade components for UI elements.
- **layouts/**: Contains layout templates (e.g., app layout, guest layout) used to wrap other views.
- **livewire/**: Contains Blade views for Livewire components.
- **numbers/**: Contains views related to number management and display.
- **orders/**: Contains views for order creation, editing, and display.
- **products/**: Contains views for product management and display.
- **profile/**: Contains user profile views (view, edit, delete, etc.).
- **settings/**: Contains views for application or user settings.
- **tables/**: Contains views for table management and table-related flows.
- **temp/**: Temporary or experimental views; may be used for development/testing.
- **vendor/**: Third-party or package-provided Blade views (e.g., for Livewire, Jetstream, etc.).

### resources/views/auth/
- **confirm-password.blade.php**: View for confirming the user's password before sensitive actions.
- **forgot-password.blade.php**: View for requesting a password reset link.
- **login.blade.php**: Login form for user authentication.
- **register.blade.php**: Registration form for new users.
- **reset-password.blade.php**: View for resetting the user's password using a token.
- **verify-email.blade.php**: View prompting users to verify their email address.

### resources/views/components/
- **application-logo.blade.php**: Blade component for rendering the application's logo.
- **auth-session-status.blade.php**: Component for displaying authentication session status messages.
- **danger-button.blade.php**: Styled button component for destructive actions.
- **dropdown-link.blade.php**: Component for links inside dropdown menus.
- **dropdown.blade.php**: Component for dropdown menu containers.
- **input-error.blade.php**: Component for displaying input validation errors.
- **input-label.blade.php**: Component for form input labels.
- **modal.blade.php**: Component for modal dialog windows.
- **nav-link.blade.php**: Component for navigation links.
- **primary-button.blade.php**: Styled button component for primary actions.
- **responsive-nav-link.blade.php**: Navigation link component for responsive layouts.
- **secondary-button.blade.php**: Styled button component for secondary actions.
- **text-input.blade.php**: Component for text input fields.

### resources/views/layouts/
- **app.blade.php**: Main application layout, wraps most authenticated views.
- **guest.blade.php**: Layout for guest (unauthenticated) pages.
- **navigation.blade.php**: Partial for the main navigation bar, included in layouts.

### resources/views/livewire/
- **all-orders-list.blade.php**: View for the admin's all-orders Livewire component, including pending table requests and order management.
- **analytics-dashboard.blade.php**: View for the analytics dashboard Livewire component. Added May 2025.
- **numbers-list.blade.php**: View for the Livewire component displaying real-time numbers.
- **order-timer.blade.php**: View for the Livewire component handling order timing/countdown features.
- **orders-list.blade.php**: View for listing and editing orders via Livewire.
- **products-list.blade.php**: View for product management via Livewire, including CRUD and category management.
- **tables-list.blade.php**: View for table management via Livewire, including order viewing and status toggling.

### resources/views/numbers/
- **index.blade.php**: Main view for displaying numbers.
- **live.blade.php**: View for live number updates or real-time display.
- **livewire.blade.php**: View for integrating Livewire with number management.

### resources/views/orders/
- **archive.blade.php**: View for exporting or displaying archived orders.
- **confirmation.blade.php**: View for order confirmation dialogs or pages.
- **create.blade.php**: View for creating new orders.
- **index.blade.php**: Main view for listing and managing orders.
- **table-closed.blade.php**: View shown when a table is closed to new orders.
- **waiting-approval.blade.php**: View shown to customers when waiting for admin approval to open a table.

### resources/views/products/
- **livewire.blade.php**: View for integrating Livewire with product management features.

### resources/views/profile/
- **edit.blade.php**: View for editing user profile information.
- **partials/**: Contains partial views for profile management forms.
  - **delete-user-form.blade.php**: Partial for the user account deletion form.
  - **update-password-form.blade.php**: Partial for the password update form.
  - **update-profile-information-form.blade.php**: Partial for the profile information update form.

### resources/views/settings/
- **index.blade.php**: Main view for application or user settings.

### resources/views/tables/
- **index.blade.php**: Main view for table management and related flows.

### resources/views/temp/
- (Folder is empty)

### resources/views/vendor/
- **livewire/**: Contains published Livewire package views for different frontend frameworks.
  - **bootstrap.blade.php**: Livewire view styled for Bootstrap.
  - **simple-bootstrap.blade.php**: Simplified Livewire view for Bootstrap.
  - **simple-tailwind.blade.php**: Simplified Livewire view for Tailwind CSS.
  - **tailwind.blade.php**: Livewire view styled for Tailwind CSS.

## storage/
- **app/**: Application-specific storage for user files and app data.
  - **.gitignore**: Ensures contents are not tracked by git.
  - **private/**: Stores private, non-public files (e.g., temporary Livewire uploads in `livewire-tmp/`).
    - **livewire-tmp/**: Temporary storage for Livewire file uploads; files are deleted after processing.
  - **public/**: Stores files intended to be publicly accessible (symlinked to public/storage). Contains subfolders for archives and product icons.
    - **archive/**: Stores exported or archived order data (e.g., XML files for backups or reporting).
    - **product-icons/**: Stores SVG icon files for products, referenced in the UI. Filenames are hashed for uniqueness and cache busting.
- **framework/**: Laravel framework storage for cache, sessions, testing, and compiled views.
  - **.gitignore**: Ensures contents are not tracked by git.
  - **cache/**: Stores cached data for performance. Contains a `data/` subfolder for cache items.
  - **sessions/**: Stores session files for user sessions.
  - **testing/**: Stores files related to automated testing.
  - **views/**: Stores compiled Blade templates for faster rendering. Files are auto-generated and can be cleared safely.
- **logs/**: Stores application log files.
  - **.gitignore**: Ensures logs are not tracked by git.
  - **laravel.log**: Main application log file, records errors, warnings, and debug info.

## tests/
- **TestCase.php**: Base test case class for all tests. Sets up the application environment for testing. Extend this class for custom setup or helper methods.
- **Feature/**: Contains feature (integration) tests that test multiple components or user flows.
  - **ExampleTest.php**: Example feature test provided by Laravel. Can be used as a template for new tests.
  - **ProfileTest.php**: Tests related to user profile features (view, update, delete, etc.).
  - **Auth/**: Authentication-related feature tests.
    - **AuthenticationTest.php**: Tests login and authentication flows.
    - **EmailVerificationTest.php**: Tests email verification process.
    - **PasswordConfirmationTest.php**: Tests password confirmation for sensitive actions.
    - **PasswordResetTest.php**: Tests password reset flow.
    - **PasswordUpdateTest.php**: Tests updating user passwords.
    - **RegistrationTest.php**: Tests user registration flow.
- **Unit/**: Contains unit tests for individual classes or methods.
  - **ExampleTest.php**: Example unit test provided by Laravel. Can be used as a template for new unit tests.

## vendor/
- **autoload.php**: Composer autoloader. Required for loading all PHP dependencies. Do not edit manually.
- **bin/**: Executable binaries provided by Composer packages (e.g., PHPUnit, PHP-CS-Fixer). Used for CLI tools and scripts.
- **[vendor package folders]**: Each folder (e.g., brick/, carbonphp/, composer/, doctrine/, egulias/, fakerphp/, filp/, fruitcake/, graham-campbell/, guzzlehttp/, hamcrest/, laravel/, league/, livewire/, mockery/, monolog/, myclabs/, nesbot/, nette/, nikic/, nunomaduro/, paragonie/, phar-io/, phpoption/, phpunit/, psr/, psy/, pusher/, ralouphie/, ramsey/, sebastian/, staabm/, symfony/, theseer/, tijsverkoyen/, vlucas/, voku/, webmozart/) contains the source code for a specific Composer dependency. Do not edit these files directly; manage dependencies via composer.json and composer.lock.

**Key notes:**
- The vendor directory is auto-generated by Composer. Never edit files here manually.
- To add, update, or remove dependencies, use Composer commands and edit composer.json.
- Some packages may include their own assets, config, or CLI tools in their respective folders.
