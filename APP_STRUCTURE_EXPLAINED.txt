# Application Architecture and How Everything Works

This document provides a clear, specific, and comprehensive explanation of how the entire application is structured and how its components interact, based on the detailed app structure references.

---

## 1. Core Application Structure

The application is a Laravel-based system designed for bar and restaurant management. It is organized into logical folders, each with a specific responsibility:

- **App/**: Contains the main application logic, including controllers (handling HTTP requests), models (database interaction), Livewire components (real-time UI), events, service providers, and Blade view components.
- **bootstrap/**: Handles application bootstrapping and caching of configuration and services.
- **config/**: All configuration files for authentication, broadcasting, cache, database, mail, queue, services, session, logging, and Livewire.
- **database/**: Contains migrations (schema changes), factories (test data), and seeders (initial data population).
- **docs/**: Project documentation for features and technical flows.
- **public/**: Web server root. Contains entry points, compiled assets, images, fonts, JS, CSS, and symlinked storage for user uploads.
- **resources/**: Source files for frontend assets (CSS, JS) and Blade templates for all UI views.
- **routes/**: Route definitions for web, API, authentication, broadcasting, and console commands.
- **storage/**: Stores user files, framework cache, sessions, compiled views, and logs.
- **tests/**: Feature and unit tests for all major flows and components.
- **vendor/**: Composer-managed PHP dependencies. Never edited directly.

---

## 2. How the Application Works

### Request Lifecycle
1. **Entry Point**: All HTTP requests enter via `public/index.php`.
2. **Routing**: Laravel routes the request using definitions in `routes/web.php` (for web), `api.php` (for API), etc.
3. **Controllers**: The appropriate controller in `App/Http/Controllers` handles the request, interacts with models, and returns a response (often a Blade view or JSON).
4. **Middleware**: Requests pass through middleware for authentication, admin checks, theme handling, etc.
5. **Views**: Blade templates in `resources/views` render the UI, using layouts, components, and Livewire for dynamic features.
6. **Assets**: CSS/JS are compiled from `resources/css` and `resources/js` and served from `public/`.
7. **Database**: Eloquent models in `App/Models` interact with the database, using migrations to define schema and seeders/factories for data.
8. **Real-Time**: Livewire components and events enable real-time updates (e.g., order status, table requests).

### Key Flows
- **Authentication**: Managed by Laravel’s built-in system, with custom controllers and views for login, registration, password reset, and email verification.
- **Admin vs. User**: Middleware and policies restrict access to admin-only features. Admins can manage tables, products, orders, and view all activity.
- **QR Table Requests**: Customers scan a QR code, triggering a table status change and admin approval flow. Admins see pending requests and can approve them, which updates the table status and allows customers to order.
- **Order Management**: Orders are created, updated, and tracked via Livewire components and Eloquent models. Activity is logged for auditing.
- **Product & Table Management**: Products and tables are managed via CRUD controllers and Livewire components, with category and icon support.
- **Settings & Profile**: Users can update their profile and settings via dedicated views and controllers.
- **Testing**: Feature and unit tests ensure all flows work as expected.

### Security & Privacy
Barmada is built with a strong focus on security and privacy:
- **Authentication & Authorization**: All access is protected by Laravel’s authentication system. User roles (admin, editor, etc.) are enforced via middleware and policies, restricting sensitive actions to authorized users only.
- **Data Protection**: User data, orders, and business information are stored securely using Eloquent models. Sensitive data is protected by Laravel’s encryption and secure session management.
- **Access Control**: Middleware such as `EnsureUserIsAdmin` and custom policies ensure only permitted users can access or modify critical resources.
- **Audit Logging**: All important actions (such as order changes, payments, and user management) are logged in the `activity_logs` table, providing a full audit trail for transparency and accountability.
- **Secure Asset Handling**: File uploads and user-generated content are stored in protected directories, with public access only to intended files via symlinks.
- **HTTPS & Session Security**: The app is designed to run over HTTPS, and sessions are securely managed to prevent unauthorized access.
- **Testing & Validation**: Feature and unit tests cover authentication, authorization, and data validation to ensure security is maintained as the app evolves.

---

## 3. File and Folder Relationships
- **Controllers** call **models** for data, return **views** for UI, and use **middleware** for access control.
- **Livewire components** provide real-time interactivity, with paired PHP and Blade files.
- **Migrations** define the database structure; **seeders** and **factories** populate and test data.
- **Assets** are authored in `resources/`, compiled, and served from `public/`.
- **Storage** is used for user uploads, logs, cache, and compiled views.
- **Vendor** contains all third-party PHP code, managed by Composer.

---

## 4. Editing and Extending
- To add features, create or update controllers, models, migrations, and views as needed.
- Use Livewire for real-time UI updates.
- Update routes to expose new endpoints.
- Use middleware for new access rules.
- Add tests in `tests/` to cover new features.
- Manage dependencies via Composer and NPM.

## Analytics QA & Test Data
- The database is seeded with a realistic test editor user (editor@example.com / password, is_editor: true) and a large dataset (categories, products, tables, sessions, orders, order items) for analytics dashboard QA.
- All analytics metrics are sourced from: orders, order_items, products, categories, tables, table_sessions, users, activity_logs.
- All analytics queries are filtered by editor_id for privacy and multi-tenant isolation.

---

## 5. UI Rendering Logic and Field Usage (Detailed Examples)

This section documents how specific fields from the database/models are used in Blade templates and UI components, including the logic for generating dynamic titles, labels, and other elements.

### Table Number Display in Tables Page
- **Location:** `resources/views/livewire/tables-list.blade.php`
- **Logic:**
  - Each table card displays the table number using:
    ```blade
    Table {{ $table->table_number ?? $table->id }}
    ```
  - This ensures that tables are always numbered from 1 upwards for each establishment, filling any gaps if tables are deleted. The `table_number` field is managed in the backend to always provide a contiguous sequence per editor.
  - If `table_number` is not set, it falls back to the table's database `id`.

### Table Number in Order Creation Page
- **Location:** `resources/views/orders/create.blade.php`
- **Logic:**
  - The table selection dropdown displays:
    ```blade
    <option value="{{ $table->id }}">Mesa {{ $table->table_number }}</option>
    ```
  - This ensures the number after "Mesa" matches the table card number in the tables page, providing a consistent user experience.

### General Pattern
- For all UI elements that display a table number, always use the `table_number` field for user-facing numbering, not the database `id`.
- This pattern is followed in all relevant Blade templates and Livewire components to ensure consistency across the application.

---

## 6. User Model, Roles, and UI Rendering Logic

This section documents how user model fields and roles are used in Blade templates and UI components, and how user-specific UI is rendered throughout the application.

### User Model Fields
- **Key fields:**
  - `name`, `email`: Displayed in profile, dashboard, and navigation UI.
  - `is_admin`, `is_editor`, `is_staff`: Used to determine user role and permissions.
  - `preferences`: Used for user-specific settings (e.g., theme).
  - `editor_id`: Used to link staff to their editor (owner/manager).

### Role-Based UI Rendering
- **Admin:**
  - Has access to all data and management features (all editors, all tables, all orders, all analytics).
  - Admin-only menus and dashboard sections are shown if `auth()->user()->is_admin` is true.
- **Editor:**
  - Sees only their own business data (tables, products, categories, orders, staff, analytics).
  - UI is filtered by `editor_id` to ensure isolation.
  - Can manage staff accounts (users with `is_staff` and `editor_id` matching the editor's id).
- **Staff:**
  - Limited access, typically to order and table management only.
  - UI hides admin/editor-only features if `auth()->user()->is_staff` is true.

### UI Examples
- **Navigation Bar:**
  - Shows user name and role (e.g., "Admin", "Editor", "Staff").
  - Menu items are conditionally rendered based on user role.
- **Profile/Settings:**
  - Displays and allows editing of `name`, `email`, and `preferences`.
- **Staff Management:**
  - Editors see a staff management panel (Livewire component) listing all users with `is_staff` and their `editor_id`.
- **Data Filtering:**
  - All analytics, tables, products, categories, and orders are filtered by `editor_id` for editors and staff.
  - Admins see all data; editors and staff see only their own.

### Example Blade Usage
```blade
@if(auth()->user()->is_admin)
    <a href="/admin">Admin Dashboard</a>
@endif
@if(auth()->user()->is_editor)
    <a href="/analytics">My Analytics</a>
@endif
@if(auth()->user()->is_staff)
    <a href="/orders">Staff Orders</a>
@endif
<span>{{ auth()->user()->name }}</span>
```

---

## 7. Model Factories (database/factories)

Laravel model factories are used to generate fake but realistic data for development and testing. Each factory defines the default attributes for a model and is used in seeders and tests to quickly populate the database with relationally correct data.

### Factories Overview
- **UserFactory.php**: Generates users with fake name, email, password, and verification fields. Used for seeding admins, editors, and staff. Example fields: `name`, `email`, `email_verified_at`, `password`, `remember_token`.
- **TableFactory.php**: Creates tables with a unique `table_number`, `orders` count, optional `reference`, and links to an editor (`editor_id`).
- **ProductFactory.php**: Creates products with a `name`, `description`, `price`, `category_id`, and `editor_id`.
- **OrderFactory.php**: Creates orders with `editor_id`, `table_id`, `status`, `total_amount`, `amount_paid`, `amount_left`, `is_grouped`, and timestamps.
- **OrderItemFactory.php**: Creates order items with `order_id`, `product_id`, `quantity`, `price`, `is_paid`, and `item_index`.
- **CategoryFactory.php**: Creates categories with a `name` and `editor_id`.
- **TableSessionFactory.php**: Creates table sessions with `table_id`, `editor_id`, `session_number`, `date`, `unique_token`, `opened_at`, `closed_at`, `opened_by`, `closed_by`, and `status`.

These factories ensure that all models have realistic, relationally correct data for development, testing, and analytics QA. They are essential for seeding the database and running automated tests.

---

## 8. Bootstrap Icons for Products

Bootstrap Icons are used throughout the application to visually represent products, categories, and actions. Each product can be assigned an icon by setting its `icon_type` to `'bootstrap'` and its `icon_value` to the desired icon class (e.g., `bi-alarm`).

Below is a list of Bootstrap icon class names (v1.0.0-alpha2) that are available for use with products. Only these class names are valid:

### Bootstrap Icon Class Names (v1.0.0-alpha2)
- bi-x-octagon-fill
- bi-x-square
- bi-x-square-fill
- bi-alarm
- bi-alarm-fill
- bi-alert-circle
- bi-alert-circle-fill
- bi-alert-octagon
- bi-alert-octagon-fill
- bi-alert-square
- bi-alert-square-fill
- bi-alert-triangle
- bi-alert-triangle-fill
- bi-archive
- bi-archive-fill
- bi-arrow-bar-bottom
- bi-arrow-bar-left
- bi-arrow-bar-right
- bi-arrow-bar-up
- bi-arrow-clockwise
- bi-arrow-counterclockwise
- bi-arrow-down
- bi-arrow-down-left
- bi-arrow-down-right
- bi-arrow-down-short
- bi-arrow-left
- bi-arrow-left-right
- bi-arrow-left-short
- bi-arrow-repeat
- bi-arrow-right
- bi-arrow-right-short
- bi-arrows-angle-contract
- bi-arrows-angle-expand
- bi-arrows-collapse
- bi-arrows-expand
- bi-arrows-fullscreen
- bi-arrow-up
- bi-arrow-up-down
- bi-arrow-up-left
- bi-arrow-up-right
- bi-arrow-up-short
- bi-at
- bi-award
- bi-backspace
- bi-backspace-fill
- bi-backspace-reverse
- bi-backspace-reverse-fill
- bi-bar-chart
- bi-bar-chart-fill
- bi-battery
- bi-battery-charging
- bi-battery-full
- bi-bell
- bi-bell-fill
- bi-blockquote-left
- bi-blockquote-right
- bi-book
- bi-book-half-fill
- bi-bookmark
- bi-bookmark-fill
- bi-bootstrap
- bi-bootstrap-fill
- bi-bootstrap-reboot
- bi-box-arrow-bottom-left
- bi-box-arrow-bottom-right
- bi-box-arrow-down
- bi-box-arrow-left
- bi-box-arrow-right
- bi-box-arrow-up
- bi-box-arrow-up-left
- bi-box-arrow-up-right
- bi-braces
- bi-brightness-fill-high
- bi-brightness-fill-low
- bi-brightness-high
- bi-brightness-low
- bi-brush
- bi-bucket
- bi-bucket-fill
- bi-building
- bi-bullseye
- bi-calendar
- bi-calendar-fill
- bi-camera
- bi-camera-video
- bi-camera-video-fill
- bi-capslock
- bi-capslock-fill
- bi-chat
- bi-chat-fill
- bi-check
- bi-check-box
- bi-check-circle
- bi-chevron-compact-down
- bi-chevron-compact-left
- bi-chevron-compact-right
- bi-chevron-compact-up
- bi-chevron-down
- bi-chevron-left
- bi-chevron-right
- bi-chevron-up
- bi-circle
- bi-circle-fill
- bi-circle-half
- bi-circle-slash
- bi-clock
- bi-clock-fill
- bi-cloud
- bi-cloud-download
- bi-cloud-fill
- bi-cloud-upload
- bi-code
- bi-code-slash
- bi-columns
- bi-columns-gutters
- bi-command
- bi-compass
- bi-cone
- bi-cone-striped
- bi-controller
- bi-credit-card
- bi-cursor
- bi-cursor-fill
- bi-dash
- bi-diamond
- bi-diamond-half
- bi-display
- bi-display-fill
- bi-document
- bi-document-code
- bi-document-diff
- bi-document-richtext
- bi-documents
- bi-documents-alt
- bi-document-spreadsheet
- bi-document-text
- bi-dot
- bi-download
- bi-egg-fried
- bi-eject
- bi-eject-fill
- bi-envelope
- bi-envelope-fill
- bi-envelope-open
- bi-envelope-open-fill
- bi-eye
- bi-eye-fill
- bi-eye-slash
- bi-eye-slash-fill
- bi-filter
- bi-flag
- bi-flag-fill
- bi-folder
- bi-folder-fill
- bi-folder-symlink
- bi-folder-symlink-fill
- bi-fonts
- bi-forward
- bi-forward-fill
- bi-gear
- bi-gear-fill
- bi-gear-wide
- bi-gear-wide-connected
- bi-geo
- bi-graph-down
- bi-graph-up
- bi-grid
- bi-grid-fill
- bi-hammer
- bi-hash
- bi-heart
- bi-heart-fill
- bi-house
- bi-house-fill
- bi-image
- bi-image-alt
- bi-image-fill
- bi-images
- bi-inbox
- bi-inboxes
- bi-inboxes-fill
- bi-inbox-fill
- bi-info
- bi-info-fill
- bi-info-square
- bi-info-square-fill
- bi-justify
- bi-justify-left
- bi-justify-right
- bi-kanban
- bi-kanban-fill
- bi-laptop
- bi-layout-sidebar
- bi-layout-sidebar-reverse
- bi-layout-split
- bi-list
- bi-list-check
- bi-list-ol
- bi-list-task
- bi-list-ul
- bi-lock
- bi-lock-fill
- bi-map
- bi-mic
- bi-moon
- bi-music-player
- bi-music-player-fill
- bi-option
- bi-outlet
- bi-pause
- bi-pause-fill
- bi-pen
- bi-pencil
- bi-people
- bi-people-fill
- bi-person
- bi-person-fill
- bi-phone
- bi-phone-landscape
- bi-pie-chart
- bi-pie-chart-fill
- bi-play
- bi-play-fill
- bi-plug
- bi-plus
- bi-power
- bi-question
- bi-question-fill
- bi-question-square
- bi-question-square-fill
- bi-reply
- bi-reply-all
- bi-reply-all-fill
- bi-reply-fill
- bi-screwdriver
- bi-search
- bi-shield
- bi-shield-fill
- bi-shield-lock
- bi-shield-lock-fill
- bi-shield-shaded
- bi-shift
- bi-shift-fill
- bi-skip-backward
- bi-skip-backward-fill
- bi-skip-end
- bi-skip-end-fill
- bi-skip-forward
- bi-skip-forward-fill
- bi-skip-start
- bi-skip-start-fill
- bi-speaker
- bi-square
- bi-square-fill
- bi-square-half
- bi-star
- bi-star-fill
- bi-star-half
- bi-stop
- bi-stop-fill
- bi-stopwatch
- bi-stopwatch-fill
- bi-sun
- bi-table
- bi-tablet
- bi-tablet-landscape
- bi-tag
- bi-tag-fill
- bi-terminal
- bi-terminal-fill
- bi-text-center
- bi-text-indent-left
- bi-text-indent-right
- bi-text-left
- bi-text-right
- bi-three-dots
- bi-three-dots-vertical
- bi-toggle-off
- bi-toggle-on
- bi-toggles
- bi-tools
- bi-trash
- bi-trash-fill
- bi-triangle
- bi-triangle-fill
- bi-triangle-half
- bi-trophy
- bi-tv
- bi-tv-fill
- bi-type
- bi-type-bold
- bi-type-h1
- bi-type-h2
- bi-type-h3
- bi-type-italic
- bi-type-strikethrough
- bi-type-underline
- bi-unlock
- bi-unlock-fill
- bi-upload
- bi-volume-down
- bi-volume-down-fill
- bi-volume-mute
- bi-volume-mute-fill
- bi-volume-up
- bi-volume-up-fill
- bi-wallet
- bi-watch
- bi-wifi
- bi-window
- bi-wrench
- bi-x
- bi-x-circle
- bi-x-circle-fill
- bi-x-octagon

(For a complete and current list, see the Bootstrap Icons documentation.)

---

## 9. User Registration, Username, and Dashboard URLs

### Username Field and Unique URLs
- The `users` table now includes a `username` field (unique, no spaces, lowercase, used for URLs and QR codes).
- The registration form requires a `username`, `first_name`, and `last_name`.
- `username` is used for all dashboard URLs, QR links, and table links (e.g., `/dashboard/{username}` or `/qr-entry/{username}/{table_number}`).
- `first_name` and `last_name` are used for display in the UI (navigation, profile, emails, etc.).
- The old `name` field is retained for backward compatibility but will be deprecated in favor of `first_name` and `last_name`.

### Registration and Validation
- Registration form and validation require `username` (unique, no spaces), `first_name`, `last_name`, `email`, and `password`.
- The `username` is validated to ensure it is a single word, contains only allowed characters, and is unique.

### Code Usage
- All code that generates dashboard URLs, QR links, and table links now uses `username` instead of `name`.
- All display logic (profile, navigation, emails) uses `first_name` and `last_name`.
- Migration and model updates ensure `username` is unique and indexed.

---

This document is a high-level map of how everything fits together. For file-by-file details, see the APP_STRUCTURE_REFERENCE files.
